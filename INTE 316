#b)i. differentiation.
import sympy as sp
x = sp.symbols('x')
f = x**2 - x - 2
f’ = sp.diff(f, x)
print(f"The derivative of {f} is {f’}")
#ii.Numerical integration
import scipy.integrate as integrate
import numpy as np

def f(x):
    return x**2 - x - 2
a, b = 0, 3
integral, error = integrate.quad(f, a, b)
print(f"The integral of the function from {a} to {b} is {integral} with error {error}")
#iii.curve fitting
import scipy.optimize as opt
import matplotlib.pyplot as plt

def func(x, a, b, c):
    return a * x**2 + b * x + c

x_data = np.linspace(-10, 10, 100)
y_data = func(x_data, 1, -1, -2) + np.random.normal(0, 1, x_data.shape)

popt, pcov = opt.curve_fit(func, x_data, y_data)
print(f"Fitted parameters: {popt}")

plt.scatter(x_data, y_data, label='Data')
plt.plot(x_data, func(x_data, *popt), color='red', label='Fitted curve')
plt.legend()
plt.show()
#iv.linear regression
from numpy import polyfit, poly1d
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 100)
y = 2 * x + 1 + np.random.normal(0, 1, x.shape)

coefficients = polyfit(x, y, 1)
linear_fit = poly1d(coefficients)

print(f"Linear regression coefficients: {coefficients}")


plt.scatter(x, y, label='Data')
plt.plot(x, linear_fit(x), color='red', label='Linear fit')
plt.legend()
plt.show()
#v.spline interpolation
from scipy.interpolate import splrep, splev
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 10)
y = np.sin(x)

tck = splrep(x, y)
xnew = np.linspace(0, 10, 200)
ynew = splev(xnew, tck)

plt.scatter(x, y, label='Data')
plt.plot(xnew, ynew, color='red', label='Spline interpolation')
plt.legend()
plt.show()
#C.)
x0, y0 = 2.00, 7.2
  x1, y1 = 4.25, 7.1

x = 4.0
y = y0 + (x - x0) * (y1 - y0) / (x1 - x0)

print(f"The value of y at x={x} is {y:.2f}")
#G.)
import numpy as np

def trapezoidal_rule(f, a, b, n):
    h = (b - a) / n
    
    integral = (f(a) + f(b)) / 2.0
    
    for i in range(1, n):
        x = a + i * h
        integral += f(x)
    
    integral *= h
    
    return integral

if __name__ == "__main__":

    def f(x):
        return np.sin(x)
    
    a = 0
    b = np.pi
    n = 1000
    
    result = trapezoidal_rule(f, a, b, n)
    
    print(f"The approximate integral of sin(x) from {a} to {b} is {result:.6f}")
